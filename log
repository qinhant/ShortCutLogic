Flattening the netlist for multiplier_miter...

 /----------------------------------------------------------------------------\
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |  Copyright (C) 2012 - 2024  Claire Xenia Wolf <claire@yosyshq.com>         |
 |  Distributed under an ISC-like license, type "license" to see terms        |
 \----------------------------------------------------------------------------/
 Yosys 0.48+5 (git sha1 7a362f1f7, clang++ 18.1.8 -fPIC -O3)

-- Running command `read -define ASSUME_ON=1' --

-- Executing script file `scripts/flatten_verilog_temp.ys' --

1. Executing Verilog-2005 frontend: verilog/multiplier_miter.sv
Parsing formal SystemVerilog input from `verilog/multiplier_miter.sv' to AST representation.
Generating RTLIL representation for module `\MUL'.
Generating RTLIL representation for module `\top'.
Successfully finished Verilog frontend.

2. Executing PREP pass.

2.1. Executing HIERARCHY pass (managing design hierarchy).

2.1.1. Analyzing design hierarchy..
Top module:  \top
Used module:     \MUL

2.1.2. Analyzing design hierarchy..
Top module:  \top
Used module:     \MUL
Removed 0 unused modules.
Module top directly or indirectly contains formal properties -> setting "keep" attribute.
Warning: Resizing cell port top.copy2.o from 17 bits to 32 bits.
Warning: Resizing cell port top.copy1.o from 17 bits to 32 bits.

2.2. Executing PROC pass (convert processes to netlists).

2.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

2.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

2.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 13 assignments to connections.

2.2.4. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\MUL.$proc$verilog/multiplier_miter.sv:0$26'.
  Set init value: \a_reg = 16'0000000000000000
  Set init value: \b_reg = 16'0000000000000000
  Set init value: \o_reg = 0
  Set init value: \busy = 1'0
  Set init value: \finish = 1'0
  Set init value: \counter = 5'00000

2.2.5. Executing PROC_ARST pass (detect async resets in processes).

2.2.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.

2.2.7. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\top.$proc$verilog/multiplier_miter.sv:100$35'.
Creating decoders for process `\MUL.$proc$verilog/multiplier_miter.sv:0$26'.
Creating decoders for process `\MUL.$proc$verilog/multiplier_miter.sv:36$25'.

2.2.8. Executing PROC_DLATCH pass (convert process syncs to latches).

2.2.9. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\top.\assume_1_violate' using process `\top.$proc$verilog/multiplier_miter.sv:100$35'.
  created $dff cell `$procdff$46' with positive edge clock.
Creating register for signal `\MUL.\a_reg' using process `\MUL.$proc$verilog/multiplier_miter.sv:36$25'.
  created $dff cell `$procdff$47' with positive edge clock.
Creating register for signal `\MUL.\b_reg' using process `\MUL.$proc$verilog/multiplier_miter.sv:36$25'.
  created $dff cell `$procdff$48' with positive edge clock.
Creating register for signal `\MUL.\o_reg' using process `\MUL.$proc$verilog/multiplier_miter.sv:36$25'.
  created $dff cell `$procdff$49' with positive edge clock.
Creating register for signal `\MUL.\busy' using process `\MUL.$proc$verilog/multiplier_miter.sv:36$25'.
  created $dff cell `$procdff$50' with positive edge clock.
Creating register for signal `\MUL.\finish' using process `\MUL.$proc$verilog/multiplier_miter.sv:36$25'.
  created $dff cell `$procdff$51' with positive edge clock.
Creating register for signal `\MUL.\counter' using process `\MUL.$proc$verilog/multiplier_miter.sv:36$25'.
  created $dff cell `$procdff$52' with positive edge clock.

2.2.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

2.2.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `top.$proc$verilog/multiplier_miter.sv:100$35'.
Removing empty process `MUL.$proc$verilog/multiplier_miter.sv:0$26'.
Removing empty process `MUL.$proc$verilog/multiplier_miter.sv:36$25'.
Cleaned up 0 empty switches.

2.2.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~2 debug messages>
Optimizing module MUL.
<suppressed ~5 debug messages>

2.3. Executing FUTURE pass.

2.4. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
Optimizing module MUL.

2.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Finding unused cells or wires in module \MUL..
Removed 3 unused cells and 28 unused wires.
<suppressed ~5 debug messages>

2.6. Executing CHECK pass (checking for obvious problems).
Checking module MUL...
Checking module top...
Found and reported 0 problems.

2.7. Executing OPT pass (performing simple optimizations).

2.7.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module MUL.
Optimizing module top.

2.7.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MUL'.
<suppressed ~12 debug messages>
Finding identical cells in module `\top'.
Removed a total of 4 cells.

2.7.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \MUL..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.
<suppressed ~5 debug messages>

2.7.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \MUL.
  Optimizing cells in module \top.
Performed a total of 0 changes.

2.7.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MUL'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.7.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MUL..
Finding unused cells or wires in module \top..
Removed 0 unused cells and 4 unused wires.
<suppressed ~1 debug messages>

2.7.7. Executing OPT_EXPR pass (perform const folding).
Optimizing module MUL.
Optimizing module top.

2.7.8. Rerunning OPT passes. (Maybe there is more to do..)

2.7.9. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \MUL..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.
<suppressed ~5 debug messages>

2.7.10. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \MUL.
  Optimizing cells in module \top.
Performed a total of 0 changes.

2.7.11. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MUL'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.7.12. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MUL..
Finding unused cells or wires in module \top..

2.7.13. Executing OPT_EXPR pass (perform const folding).
Optimizing module MUL.
Optimizing module top.

2.7.14. Finished OPT passes. (There is nothing left to do.)

2.8. Executing WREDUCE pass (reducing word size of cells).
Removed top 31 bits (of 32) from port B of cell MUL.$add$verilog/multiplier_miter.sv:33$18 ($add).
Removed top 26 bits (of 32) from port Y of cell MUL.$add$verilog/multiplier_miter.sv:33$18 ($add).
Removed top 27 bits (of 32) from mux cell MUL.$ternary$verilog/multiplier_miter.sv:33$19 ($mux).
Removed top 1 bits (of 6) from port Y of cell MUL.$add$verilog/multiplier_miter.sv:33$18 ($add).
Removed top 27 bits (of 32) from wire MUL.$add$verilog/multiplier_miter.sv:33$18_Y.

2.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MUL..
Finding unused cells or wires in module \top..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

2.10. Executing MEMORY_COLLECT pass (generating $mem cells).

2.11. Executing OPT pass (performing simple optimizations).

2.11.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module MUL.
Optimizing module top.

2.11.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MUL'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.11.3. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MUL..
Finding unused cells or wires in module \top..

2.11.4. Finished fast OPT passes.

2.12. Printing statistics.

=== MUL ===

   Number of wires:                 29
   Number of wire bits:            317
   Number of public wires:          18
   Number of public wire bits:     209
   Number of ports:                  6
   Number of port bits:             67
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 23
     $add                            2
     $dff                            6
     $logic_and                      3
     $logic_not                      4
     $logic_or                       2
     $mux                            5
     $shl                            1

=== top ===

   Number of wires:                 25
   Number of wire bits:            130
   Number of public wires:          18
   Number of public wire bits:      95
   Number of ports:                  8
   Number of port bits:             53
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 14
     $assert                         1
     $dff                            1
     $eq                             1
     $eqx                            2
     $logic_and                      1
     $logic_or                       2
     $ne                             1
     $not                            1
     $reduce_and                     1
     $reduce_bool                    1
     MUL                             2

=== design hierarchy ===

   top                               1
     MUL                             2

   Number of wires:                 83
   Number of wire bits:            764
   Number of public wires:          54
   Number of public wire bits:     513
   Number of ports:                 20
   Number of port bits:            187
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 58
     $add                            4
     $assert                         1
     $dff                           13
     $eq                             1
     $eqx                            2
     $logic_and                      7
     $logic_not                      8
     $logic_or                       6
     $mux                           10
     $ne                             1
     $not                            1
     $reduce_and                     1
     $reduce_bool                    1
     $shl                            2

2.13. Executing CHECK pass (checking for obvious problems).
Checking module MUL...
Checking module top...
Found and reported 0 problems.

3. Executing FLATTEN pass (flatten design).
Deleting now unused module MUL.
<suppressed ~2 debug messages>

4. Executing Verilog backend.

4.1. Executing BMUXMAP pass.

4.2. Executing DEMUXMAP pass.
Dumping module `\top'.

Warnings: 2 unique messages, 2 total
End of script. Logfile hash: 9f70622357, CPU: user 0.33s system 0.05s, MEM: 26.55 MB peak
Yosys 0.48+5 (git sha1 7a362f1f7, clang++ 18.1.8 -fPIC -O3)
Time spent: 36% 2x read_verilog (0 sec), 10% 5x opt_clean (0 sec), ...
yosys -D ASSUME_ON=1 -s scripts/flatten_verilog_temp.ys
Adding shortcut signals to multiplier_miter...
Transforming Verilog to AIGER format for multiplier_miter...

 /----------------------------------------------------------------------------\
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |  Copyright (C) 2012 - 2024  Claire Xenia Wolf <claire@yosyshq.com>         |
 |  Distributed under an ISC-like license, type "license" to see terms        |
 \----------------------------------------------------------------------------/
 Yosys 0.48+5 (git sha1 7a362f1f7, clang++ 18.1.8 -fPIC -O3)

-- Executing script file `scripts/verilog_to_aig_temp.ys' --

1. Executing Verilog-2005 frontend: output/multiplier_miter_exp/shortcut.sv
output/multiplier_miter_exp/shortcut.sv:243: ERROR: Module port `\property_o' is not declared in module header.
Trace/breakpoint trap
Traceback (most recent call last):
  File "/workspaces/ShortCutLogic/scripts/transform_verilog.py", line 227, in <module>
    verilog_to_aig(args.input_path, args.output_path, args.top)
  File "/workspaces/ShortCutLogic/scripts/transform_verilog.py", line 47, in verilog_to_aig
    with open(map_path, "r") as file:
         ^^^^^^^^^^^^^^^^^^^
FileNotFoundError: [Errno 2] No such file or directory: 'output/multiplier_miter_exp/shortcut.map'
