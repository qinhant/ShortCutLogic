/* Generated by Yosys 0.54+23 (git sha1 513f0f16d, g++ 15.1.1 -march=x86-64 -mtune=generic -O2 -fno-plt -fexceptions -fstack-clash-protection -fcf-protection -fno-omit-frame-pointer -mno-omit-leaf-frame-pointer -ffile-prefix-map=/build/yosys-git/src=/usr/src/debug/yosys-git -fPIC -O3) */

module OriginPipelinedMultiplier(clock, reset, io_req_valid, io_req_bits_fn, io_req_bits_dw, io_req_bits_in1, io_req_bits_in2, io_resp_bits_data);
  wire [63:0] _00_;
  wire [63:0] _01_;
  wire [3:0] _T;
  wire _T_1;
  wire [1:0] _T_2;
  wire _T_3;
  wire _T_9;
  wire _lhs_T_1;
  wire [31:0] _muxed_T_4;
  wire [63:0] _muxed_T_5;
  wire _rhs_T_1;
  input clock;
  wire clock;
  wire cmdHi;
  reg inPipe_bits_dw;
  reg [3:0] inPipe_bits_fn;
  reg [63:0] inPipe_bits_in1;
  reg [63:0] inPipe_bits_in2;
  reg inPipe_valid;
  input io_req_bits_dw;
  wire io_req_bits_dw;
  input [3:0] io_req_bits_fn;
  wire [3:0] io_req_bits_fn;
  input [63:0] io_req_bits_in1;
  wire [63:0] io_req_bits_in1;
  input [63:0] io_req_bits_in2;
  wire [63:0] io_req_bits_in2;
  input io_req_valid;
  wire io_req_valid;
  output [63:0] io_resp_bits_data;
  wire [63:0] io_resp_bits_data;
  reg [63:0] io_resp_bits_data_b;
  reg [63:0] io_resp_bits_data_outPipe_bits;
  reg io_resp_bits_data_v;
  wire [64:0] lhs;
  wire lhsSigned;
  wire [127:0] prod;
  input reset;
  wire reset;
  wire [64:0] rhs;
  wire rhsSigned;
  assign _lhs_T_1 = lhsSigned & inPipe_bits_in1[63];
  assign _rhs_T_1 = rhsSigned & inPipe_bits_in2[63];
  always_ff @(posedge clock)
    if (io_resp_bits_data_v) io_resp_bits_data_outPipe_bits <= io_resp_bits_data_b;
  always_ff @(posedge clock)
    if (inPipe_valid) io_resp_bits_data_b <= _01_;
  always_ff @(posedge clock)
    if (reset) io_resp_bits_data_v <= 1'h0;
    else io_resp_bits_data_v <= inPipe_valid;
  always_ff @(posedge clock)
    if (io_req_valid) inPipe_bits_in2 <= io_req_bits_in2;
  always_ff @(posedge clock)
    if (io_req_valid) inPipe_bits_in1 <= io_req_bits_in1;
  always_ff @(posedge clock)
    if (io_req_valid) inPipe_bits_dw <= io_req_bits_dw;
  always_ff @(posedge clock)
    if (io_req_valid) inPipe_bits_fn <= io_req_bits_fn;
  always_ff @(posedge clock)
    if (reset) inPipe_valid <= 1'h0;
    else inPipe_valid <= io_req_valid;
  assign rhsSigned = ! { 2'h0, inPipe_bits_fn[1], 1'h0 };
  assign _T_9 = ! { 3'h0, inPipe_bits_fn[0] };
  assign prod = $signed({ _lhs_T_1, inPipe_bits_in1 }) * $signed({ _rhs_T_1, inPipe_bits_in2 });
  assign cmdHi = inPipe_bits_fn[0] | inPipe_bits_fn[1];
  assign lhsSigned = rhsSigned | _T_9;
  assign _00_ = inPipe_bits_dw ? prod[63:0] : { _muxed_T_4, prod[31:0] };
  assign _01_ = cmdHi ? prod[127:64] : _00_;
  assign _muxed_T_4 = prod[31] ? 32'd4294967295 : 32'd0;
  assign _T = { 3'h0, inPipe_bits_fn[0] };
  assign _T_1 = inPipe_bits_fn[0];
  assign _T_2 = { inPipe_bits_fn[1], 1'h0 };
  assign _T_3 = inPipe_bits_fn[1];
  assign _muxed_T_5 = { _muxed_T_4, prod[31:0] };
  assign io_resp_bits_data = io_resp_bits_data_outPipe_bits;
  assign lhs = { _lhs_T_1, inPipe_bits_in1 };
  assign rhs = { _rhs_T_1, inPipe_bits_in2 };
endmodule

module top(clock, reset, \copy2.io_req_bits_in1 , \copy2.io_req_valid , \copy1.io_req_bits_dw , \copy2.io_req_bits_in2 , \copy1.io_req_bits_in2 , \copy1.io_req_valid , \copy2.io_req_bits_fn , \copy1.io_req_bits_fn , \copy2.io_req_bits_dw , \copy1.io_req_bits_in1 );
  wire [63:0] _00_;
  wire [63:0] _01_;
  wire [63:0] _02_;
  wire [63:0] _03_;
  wire _04_;
  wire _05_;
  wire [133:0] _06_;
  wire [133:0] _07_;
  wire _08_;
  wire _09_;
  reg \abs-.uf_neq ;
  input clock;
  wire clock;
  input \copy1.io_req_bits_dw ;
  wire \copy1.io_req_bits_dw ;
  input [3:0] \copy1.io_req_bits_fn ;
  wire [3:0] \copy1.io_req_bits_fn ;
  input [63:0] \copy1.io_req_bits_in1 ;
  wire [63:0] \copy1.io_req_bits_in1 ;
  input [63:0] \copy1.io_req_bits_in2 ;
  wire [63:0] \copy1.io_req_bits_in2 ;
  input \copy1.io_req_valid ;
  wire \copy1.io_req_valid ;
  input \copy2.io_req_bits_dw ;
  wire \copy2.io_req_bits_dw ;
  input [3:0] \copy2.io_req_bits_fn ;
  wire [3:0] \copy2.io_req_bits_fn ;
  input [63:0] \copy2.io_req_bits_in1 ;
  wire [63:0] \copy2.io_req_bits_in1 ;
  input [63:0] \copy2.io_req_bits_in2 ;
  wire [63:0] \copy2.io_req_bits_in2 ;
  input \copy2.io_req_valid ;
  wire \copy2.io_req_valid ;
  input reset;
  wire reset;
  assign _04_ = _00_ == _01_;
  assign _05_ = _02_ == _03_;
  always_comb if (1'h1) assert(_04_ && _05_);
  assign _08_ = \abs-.uf_neq  | _09_;
  always_ff @(posedge clock)
    \abs-.uf_neq  <= _08_;
  assign _09_ = _06_ != _07_;
  PipelinedMultiplier abs1 (
    .clock(clock),
    .io_req_bits_dw(\copy1.io_req_bits_dw ),
    .io_req_bits_fn(\copy1.io_req_bits_fn ),
    .io_req_bits_in1(\copy1.io_req_bits_in1 ),
    .io_req_bits_in2(\copy1.io_req_bits_in2 ),
    .io_req_valid(\copy1.io_req_valid ),
    .io_resp_bits_data(_01_),
    .reset(reset),
    .uf_in_val(_06_),
    .uf_neq(\abs-.uf_neq ),
    .uf_s_io_resp_bits_data(_00_),
    .uf_u_io_resp_bits_data(_00_)
  );
  PipelinedMultiplier abs2 (
    .clock(clock),
    .io_req_bits_dw(\copy2.io_req_bits_dw ),
    .io_req_bits_fn(\copy2.io_req_bits_fn ),
    .io_req_bits_in1(\copy2.io_req_bits_in1 ),
    .io_req_bits_in2(\copy2.io_req_bits_in2 ),
    .io_req_valid(\copy2.io_req_valid ),
    .io_resp_bits_data(_03_),
    .reset(reset),
    .uf_in_val(_07_),
    .uf_neq(\abs-.uf_neq ),
    .uf_s_io_resp_bits_data(_00_),
    .uf_u_io_resp_bits_data(_02_)
  );
  OriginPipelinedMultiplier copy1 (
    .clock(clock),
    .io_req_bits_dw(\copy1.io_req_bits_dw ),
    .io_req_bits_fn(\copy1.io_req_bits_fn ),
    .io_req_bits_in1(\copy1.io_req_bits_in1 ),
    .io_req_bits_in2(\copy1.io_req_bits_in2 ),
    .io_req_valid(\copy1.io_req_valid ),
    .io_resp_bits_data(_00_),
    .reset(reset)
  );
  OriginPipelinedMultiplier copy2 (
    .clock(clock),
    .io_req_bits_dw(\copy2.io_req_bits_dw ),
    .io_req_bits_fn(\copy2.io_req_bits_fn ),
    .io_req_bits_in1(\copy2.io_req_bits_in1 ),
    .io_req_bits_in2(\copy2.io_req_bits_in2 ),
    .io_req_valid(\copy2.io_req_valid ),
    .io_resp_bits_data(_02_),
    .reset(reset)
  );
endmodule

module PipelinedMultiplier(clock, reset, io_req_valid, io_req_bits_fn, io_req_bits_dw, io_req_bits_in1, io_req_bits_in2, io_resp_bits_data, uf_s_io_resp_bits_data, uf_u_io_resp_bits_data, uf_neq, uf_in_val);
  input clock;
  wire clock;
  input io_req_bits_dw;
  wire io_req_bits_dw;
  input [3:0] io_req_bits_fn;
  wire [3:0] io_req_bits_fn;
  input [63:0] io_req_bits_in1;
  wire [63:0] io_req_bits_in1;
  input [63:0] io_req_bits_in2;
  wire [63:0] io_req_bits_in2;
  input io_req_valid;
  wire io_req_valid;
  output [63:0] io_resp_bits_data;
  wire [63:0] io_resp_bits_data;
  input reset;
  wire reset;
  output [133:0] uf_in_val;
  wire [133:0] uf_in_val;
  input uf_neq;
  wire uf_neq;
  input [63:0] uf_s_io_resp_bits_data;
  wire [63:0] uf_s_io_resp_bits_data;
  input [63:0] uf_u_io_resp_bits_data;
  wire [63:0] uf_u_io_resp_bits_data;
  assign io_resp_bits_data = uf_neq ? uf_u_io_resp_bits_data : uf_s_io_resp_bits_data;
  assign uf_in_val = { io_req_bits_in2, io_req_bits_in1, io_req_bits_dw, io_req_bits_fn, io_req_valid };
endmodule
