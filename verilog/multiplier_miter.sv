/* Generated by Yosys 0.40+50 (git sha1 0f9ee20ea, clang++ 15.0.0 -fPIC -Os) */
`define WIDTH 2
(* top =  1  *)
(* src = "verilog/multiplier.sv:6.1-47.10" *)
module MUL(clk, in_valid, a, b, o, out_valid);
  wire [5:0] _00_;
  (* src = "verilog/multiplier.sv:34.57-34.98" *)
  wire [`WIDTH<<1-1:0] _01_;
  (* src = "verilog/multiplier.sv:30.25-30.35" *)
  wire _02_;
  (* src = "verilog/multiplier.sv:30.39-30.49" *)
  wire _03_;
  (* src = "verilog/multiplier.sv:29.22-29.39" *)
  wire _04_;
  (* src = "verilog/multiplier.sv:29.43-29.58" *)
  wire _05_;
  (* src = "verilog/multiplier.sv:29.34-29.39" *)
  wire _06_;
  (* src = "verilog/multiplier.sv:29.51-29.58" *)
  wire _07_;
  (* src = "verilog/multiplier.sv:30.25-30.49" *)
  wire _08_;
  (* src = "verilog/multiplier.sv:34.77-34.93" *)
  wire [`WIDTH<<1-1:0] _09_;
  (* src = "verilog/multiplier.sv:34.66-34.97" *)
  wire [`WIDTH<<1-1:0] _10_;
  (* src = "verilog/multiplier.sv:9.26-9.27" *)
  input [`WIDTH-1:0] a;
  wire [`WIDTH-1:0] a;
  (* src = "verilog/multiplier.sv:14.24-14.29" *)
  reg [`WIDTH-1:0] a_reg = 32'd0;
  (* src = "verilog/multiplier.sv:31.25-31.35" *)
  wire [`WIDTH-1:0] a_reg_next;
  (* src = "verilog/multiplier.sv:10.26-10.27" *)
  input [`WIDTH-1:0] b;
  wire [`WIDTH-1:0] b;
  (* src = "verilog/multiplier.sv:14.31-14.36" *)
  reg [`WIDTH-1:0] b_reg = 32'd0;
  (* src = "verilog/multiplier.sv:32.25-32.35" *)
  wire [`WIDTH-1:0] b_reg_next;
  (* src = "verilog/multiplier.sv:16.9-16.13" *)
  reg busy = 1'h0;
  (* src = "verilog/multiplier.sv:29.10-29.19" *)
  wire busy_next;
  (* src = "verilog/multiplier.sv:7.11-7.14" *)
  input clk;
  wire clk;
  (* src = "verilog/multiplier.sv:18.15-18.22" *)
  reg [5:0] counter = 6'h00;
  (* src = "verilog/multiplier.sv:33.16-33.28" *)
  wire [5:0] counter_next;
  (* src = "verilog/multiplier.sv:17.9-17.15" *)
  reg finish = 1'h0;
  (* src = "verilog/multiplier.sv:30.10-30.21" *)
  wire finish_next;
  (* src = "verilog/multiplier.sv:8.11-8.19" *)
  input in_valid;
  wire in_valid;
  (* src = "verilog/multiplier.sv:11.34-11.35" *)
  output [`WIDTH<<1-1:0] o;
  wire [`WIDTH<<1-1:0] o;
  (* src = "verilog/multiplier.sv:15.31-15.36" *)
  reg [`WIDTH<<1-1:0] o_reg = `WIDTH<<1'h0000000000000000;
  (* src = "verilog/multiplier.sv:34.32-34.42" *)
  wire [`WIDTH<<1-1:0] o_reg_next;
  (* src = "verilog/multiplier.sv:12.12-12.21" *)
  output out_valid;
  wire out_valid;
  assign _00_ = counter + (* src = "verilog/multiplier.sv:33.43-33.54" *) 1'h1;
  assign _01_ = o_reg + (* src = "verilog/multiplier.sv:34.57-34.98" *) _10_;
  assign _02_ = ! (* src = "verilog/multiplier.sv:30.25-30.35" *) a_reg;
  assign _03_ = ! (* src = "verilog/multiplier.sv:30.39-30.49" *) b_reg;
  assign _04_ = in_valid && (* src = "verilog/multiplier.sv:29.22-29.39" *) _06_;
  assign _05_ = busy && (* src = "verilog/multiplier.sv:29.43-29.58" *) _07_;
  assign finish_next = _08_ && (* src = "verilog/multiplier.sv:30.24-30.58" *) busy;
  assign _06_ = ! (* src = "verilog/multiplier.sv:29.34-29.39" *) busy;
  assign _07_ = ! (* src = "verilog/multiplier.sv:29.51-29.58" *) finish;
  assign busy_next = _04_ || (* src = "verilog/multiplier.sv:29.22-29.58" *) _05_;
  assign _08_ = _02_ || (* src = "verilog/multiplier.sv:30.25-30.49" *) _03_;
  (* src = "verilog/multiplier.sv:36.5-43.8" *)
  always @(posedge clk)
    a_reg <= a_reg_next;
  (* src = "verilog/multiplier.sv:36.5-43.8" *)
  always @(posedge clk)
    b_reg <= b_reg_next;
  (* src = "verilog/multiplier.sv:36.5-43.8" *)
  always @(posedge clk)
    o_reg <= o_reg_next;
  (* src = "verilog/multiplier.sv:36.5-43.8" *)
  always @(posedge clk)
    busy <= busy_next;
  (* src = "verilog/multiplier.sv:36.5-43.8" *)
  always @(posedge clk)
    finish <= finish_next;
  (* src = "verilog/multiplier.sv:36.5-43.8" *)
  always @(posedge clk)
    counter <= counter_next;
  assign _09_ = a_reg << (* src = "verilog/multiplier.sv:34.77-34.93" *) counter;
  assign a_reg_next = _04_ ? (* src = "verilog/multiplier.sv:31.38-31.67" *) a : a_reg;
  assign b_reg_next = _04_ ? (* src = "verilog/multiplier.sv:32.38-32.72" *) b : { 1'h0, b_reg[`WIDTH-1:1] };
  assign counter_next = busy ? (* src = "verilog/multiplier.sv:33.31-33.54" *) _00_ : 6'h00;
  assign _10_ = b_reg[0] ? (* src = "verilog/multiplier.sv:34.66-34.97" *) _09_ : `WIDTH<<1'h0000000000000000;
  assign o_reg_next = busy ? (* src = "verilog/multiplier.sv:34.45-34.98" *) _01_ : `WIDTH<<1'h0000000000000000;
  assign o = o_reg;
  assign out_valid = finish;
endmodule

module top(in_a, in_in_valid, in_b_1, in_b_2, in_clk, trigger, cmp_out_valid, cmp_o);
  wire _0_;
  wire _1_;
  wire _2_;
  output cmp_o;
  wire cmp_o;
  output cmp_out_valid;
  wire cmp_out_valid;
  wire [`WIDTH<<1-1:0] copy2_o;
  wire copy2_out_valid;
  wire [`WIDTH<<1-1:0] copy1_o;
  wire copy1_out_valid;
  input [`WIDTH-1:0] in_a;
  wire [`WIDTH-1:0] in_a;
  input [`WIDTH-1:0] in_b_1;
  input [`WIDTH-1:0] in_b_2;
  wire [`WIDTH-1:0] in_b_1;
  wire [`WIDTH-1:0] in_b_2;
  input in_clk;
  wire in_clk;
  input in_in_valid;
  wire in_in_valid;
  output trigger;
  wire trigger;
  assign _0_ = copy1_o === copy2_o;
  assign _1_ = copy1_out_valid === copy2_out_valid;
  assign _2_ = & { _1_, _0_ };
  assign trigger = ~ _2_;
  MUL copy1 (
    .a(in_a),
    .b(in_b_1),
    .clk(in_clk),
    .in_valid(in_in_valid),
    .o(copy2_o),
    .out_valid(copy2_out_valid)
  );
  MUL copy2 (
    .a(in_a),
    .b(in_b_2),
    .clk(in_clk),
    .in_valid(in_in_valid),
    .o(copy1_o),
    .out_valid(copy1_out_valid)
  );
  assign cmp_o = _0_;
  assign cmp_out_valid = _1_;

  
  reg assume_1_violate;
  wire assume_1_violate_in;
  assign assume_1_violate_in = assume_1_violate || (in_a != 0 && in_b_1 != in_b_2);
  always @(posedge in_clk) begin
    assume_1_violate <= assume_1_violate_in;
  end

  wire assume_violate;
  assign assume_violate = assume_1_violate_in;

  assert property (copy1_out_valid === copy2_out_valid || assume_violate);
endmodule
